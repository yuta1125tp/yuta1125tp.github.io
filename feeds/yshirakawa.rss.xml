<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>My blog</title><link>http://yuta1125tp.github.io/</link><description></description><atom:link href="http://yuta1125tp.github.io/feeds/yshirakawa.rss.xml" rel="self"></atom:link><lastBuildDate>Tue, 02 Sep 2014 00:00:00 +0900</lastBuildDate><item><title>てすと</title><link>http://yuta1125tp.github.io/test.html</link><description>&lt;p&gt;this is a test&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">yshirakawa</dc:creator><pubDate>Tue, 02 Sep 2014 00:00:00 +0900</pubDate><guid>tag:yuta1125tp.github.io,2014-09-02:test.html</guid><category>test</category></item><item><title>混同行列の可視化?</title><link>http://yuta1125tp.github.io/confmat-visualize.html</link><description>&lt;p&gt;混同行列ってClassificationの結果を可視化する際に使いやすいのだけど、
いろいろ情報を載せようと思うと、毎回どう書いたらいいか悩んでしまう。&lt;/p&gt;
&lt;p&gt;備忘録の意味も込めてメモ。&lt;/p&gt;
&lt;p&gt;コード中にもあるようにメインの部分はStackOverflowの回答に沿っている。
混同行列の図中に濃淡だけではなく具体的な数値も載ってるのが使いやすいポイント。
元の回答はjetのColormapだったが、そこはGrayScaleに変換。
それに伴い、数字の色を変化させたのは私の寄与。&lt;/p&gt;
&lt;p&gt;以下Gistより&lt;/p&gt;
&lt;div class="gist"&gt;
&lt;script src="https://gist.github.com/yuta1125tp/4c7f15829567a415da9e.js"&gt;&lt;/script&gt;
&lt;noscript&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/bash ...&lt;/code&gt;&lt;/pre&gt;
&lt;/noscript&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src="images/confusion_matrix.png" alt="Confusion Matrix" style="width: 50%;"/&gt;&lt;/p&gt;
&lt;p&gt;こんな感じでよろしいでしょうか。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">yshirakawa</dc:creator><pubDate>Fri, 29 Aug 2014 00:00:00 +0900</pubDate><guid>tag:yuta1125tp.github.io,2014-08-29:confmat-visualize.html</guid><category>code</category><category>python</category><category>pylab</category></item><item><title>コードの貼り付け</title><link>http://yuta1125tp.github.io/paste-code-test.html</link><description>&lt;p&gt;pelicanの挙動が知りたいのでいろいろ書いてみる。
今回はコードの貼り付け。&lt;/p&gt;
&lt;p&gt;コードの書き方がわからないような時、グーグル先生に尋ねるとだいたい何かしらヒントを得られる。
場合によってはまるまる流用できるようなこともある。&lt;/p&gt;
&lt;p&gt;正直とても助かっているので、微力ながら力添えできるよう僕も何かしらアウトプットしていきたい。&lt;/p&gt;
&lt;p&gt;以下貼り付けテスト&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#-*- coding:utf-8 -*-&lt;/span&gt;
&lt;span class="s"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="s"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;sayHello&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Hello python!&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;sayHello&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">yshirakawa</dc:creator><pubDate>Wed, 27 Aug 2014 00:00:00 +0900</pubDate><guid>tag:yuta1125tp.github.io,2014-08-27:paste-code-test.html</guid><category>code</category><category>test</category></item><item><title>画像の貼り付け</title><link>http://yuta1125tp.github.io/paste-image.html</link><description>&lt;p&gt;pelicanの挙動が知りたいのでいろいろ書いてみる。
まずは、画像の貼り付け。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;img alt="original" src="images/Costa_Rican_Frog_s.jpg" title="origin flog" /&gt;
&lt;img alt="mosaic" src="images/flog.png" title="mosaic flog " /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;上の2つの画像は以前作ったスクリプトの結果。
左が元の画像で、右が加工したもの。
数の限られた三角形の重ね合わせ（50個？）で、何とかして元画像との距離を最小化するように学習した。
学習過程には遺伝的アルゴリズムを用いた。
（面倒だったのでいんちき臭い内容だったが。）&lt;/p&gt;
&lt;p&gt;上の画像なんかも、もう少しやりようがある気もするがなかなかうまくモザイク化できない。
どうしても局所解に陥ってしまう。大域最適化の難しさを改めて認識した覚えがある。&lt;/p&gt;
&lt;p&gt;アイデアというか丸パクリの元は&lt;a href="http://rogeralsing.com/2008/12/07/genetic-programming-evolution-of-mona-lisa/"&gt;こ&lt;/a&gt;&lt;a href="http://alteredqualia.com/visualization/evolve/"&gt;こ&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;以下にソースコードを貼りたかったが力尽きた。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">yshirakawa</dc:creator><pubDate>Tue, 26 Aug 2014 00:00:00 +0900</pubDate><guid>tag:yuta1125tp.github.io,2014-08-26:paste-image.html</guid><category>test</category></item><item><title>最初の記事</title><link>http://yuta1125tp.github.io/first-post.html</link><description>&lt;h1&gt;ブログをつくった&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;何度かブログを書こうとお思い立った時はあったが、「はてな」しかり、「blogger」しかり全く長続きしない。&lt;/li&gt;
&lt;li&gt;今度のブログはどれだけ続くだろうか細くでいいから続けられたらいいな。&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">yshirakawa</dc:creator><pubDate>Mon, 25 Aug 2014 00:00:00 +0900</pubDate><guid>tag:yuta1125tp.github.io,2014-08-25:first-post.html</guid><category>pelican</category><category>python</category></item><item><title>シュタインズ・ゲート耐久をした話</title><link>http://yuta1125tp.github.io/steins-gate.html</link><description>&lt;p&gt;pelicanの挙動がいまいちわからないのでテストの意味も込めて2つ目の記事をちゃっちゃと書いてみる。
先週末、学部の友人と集まりアニメ鑑賞会を執り行った。今回見たアニメは「シュタインズ・ゲート」去年か一昨年のアニメだったような。
結構有名になっただけあって面白かった。22時頃に集まりお盆帰省のおみやげを持ち寄り見始めた。2クールものなので結局終わったのは夜が明けてからだった。
タイムスリップもの特有のバタフライ・エフェクト云々の話は物語の後半になればなるほど込み入ってくるが、僕らの眠気も物語後半になればなるほどきつくなる。
もう少し早めに集まって見始めればよかった。
バタフライ・エフェクトを題材にした映画というとその名の通りバタフライ・エフェクトという映画があったような。
あれもあれで悲しい結末が繰り返される内容だったが、あっちの方が短くまとまっていて好きかもしれない。
やり直す系だと最近のAll we need is kill？はどうだったんだろう。気になってはいたが、結局見に行けていなかった。
DVDがでたら借りようか。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">yshirakawa</dc:creator><pubDate>Mon, 25 Aug 2014 00:00:00 +0900</pubDate><guid>tag:yuta1125tp.github.io,2014-08-25:steins-gate.html</guid><category>シュタインズ・ゲート</category><category>アニメ</category></item></channel></rss>